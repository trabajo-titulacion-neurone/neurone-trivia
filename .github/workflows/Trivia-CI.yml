# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: NEURONE-Trivia CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  DROPLET_NAME: droplet-actions-neurone
  SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
  SSH_KEY_ID: holaa

jobs:
  build:

    runs-on: ubuntu-22.04

    strategy:
      matrix:
        node-version: [16.14.1]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - name: Clonación de repositorio de Trivia
      uses: actions/checkout@v3
      with:
        path: trivia 
        
    # - name: Clonación de Neurone-gm
    #   uses: actions/checkout@v3
    #   with:
    #     repository: trabajo-titulacion-neurone/modulo-neurone-gm
    #     # token: 
    #     path: neurone-gm

    # - name: Clonación de Neurone-auth
    #   uses: actions/checkout@v3
    #   with:
    #     repository: NEURONE-IL/neurone-auth
    #     path: neurone-auth

    # - name: Use Node.js ${{ matrix.node-version }}
    #   uses: actions/setup-node@v3
    #   with:
    #     node-version: ${{ matrix.node-version }}
    #     cache: 'npm'
    #     cache-dependency-path: './trivia/Client/package-lock.json'
      
    # - name: Instalar MongoDB con Docker
    #   run: docker run -d --name mongo-for-tests -p 27017:27017 -e MONGO_INITDB_ROOT_USERNAME=neuroneAdmin -e MONGO_INITDB_ROOT_PASSWORD=admin -e MONGO_INITDB_DATABASE=neuronegm mongo:latest
   
    # - name: Instalar pm2 globalmente
    #   run: npm install -g pm2
      
    # - name: Instalar http-server globalmente (OPCIONAL)
    #   run: npm install -g http-server

    # - name: Instalar Angular globalmente
    #   run: npm install -g @angular/cli
        
    # - name: Instalar Neurone-gm
    #   working-directory: ./neurone-gm/Server
    #   run: |
    #     npm install
    #     # npm test
    #     pm2 start app.js --name neurone-gm
    #     # timeout 2s pm2 logs

    # - name: Build Trivia Frontend
    #   working-directory: ./trivia/Client
    #   run: |
    #     ls
    #     npm install
    #     ng build --prod --output-path ../Server/public
        
    # - name: Instalar Trivia Backend
    #   working-directory: ./trivia/Server
    #   run: |
    #     npm install
    #     # npm test
    #     pm2 start app.js --name neurone-trivia
    #     # timeout 2s pm2 logs

    # - name: Run Frontend
    #   working-directory: ./trivia/Server/public
    #   run: nohup http-server -p 8080 &

    # - name: ls final
    #   run: pm2 ls

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    #Se verifica si el droplet o VPS a crear ya existe (se busca por nombre)
    - name: Check if the Droplet exists
      run: |
        # Se obtiene el ID de un Droplet existente con nombre $DROPLET_NAME utilizando doctl y filtrando la salida con grep y awk.
        droplet_id=$(doctl compute droplet list --format "ID,Name" --no-header | grep $DROPLET_NAME | awk '{print $1}')
        
        if [[ -z $droplet_id ]]; then
          echo "Droplet does not exist" # Si el Droplet no existe, se imprime un mensaje
          echo "create_droplet=true" >> $GITHUB_ENV # Se establece una salida personalizada "create_droplet" en "true"
        else
          echo "Droplet already exists" # Si el Droplet ya existe, se imprime un mensaje
          echo "create_droplet=false" >> $GITHUB_ENV # Se establece una salida personalizada "create_droplet" en "false"
        fi

    # Este paso se ejecutará solo si la salida personalizada "create_droplet" del paso anterior es 'true'
    - name: Create Droplet if it does not exist
      if: env.create_droplet == 'true'
      run: |
        #Se crea un nuevo droplet con las siguientes caracteristicas
        #Nombre: droplet-actions-neurone
        #SO: Ubuntu 22.04 x64 LTS
        #Region: Nueva York C1
        doctl compute droplet create $DROPLET_NAME --image ubuntu-22-04-x64 --size s-1vcpu-1gb --region nyc1 --ssh-keys ${{ secrets.SSH_PRIVATE_KEY}}


    # - name: Buscar clave SSH
    #   run: |
    #     # Verificar si la clave SSH 'key-gerardo' existe
    #     if ! doctl compute ssh-key list --format "Name" | grep -q 'key-gerardo'; then
    #       echo "La clave SSH 'key-gerardo' no se encontró. Creando nueva clave SSH..."
    #       doctl compute ssh-key create key-gerardo --public-key "$SSH_PUBLIC_KEY"
    #     else
    #       echo "La clave SSH 'key-gerardo' ya existe."
    #     fi

    
    # - name: Buscar clave SSH
    #   run: |
    #     # Verificar si la clave SSH 'key-gerardo' existe
    #     if doctl compute ssh-key list --format "ID,Name" | grep -q 'key-gerardo'; then
    #       # Obtener el ID de la clave SSH 'key-gerardo'
    #       SSH_KEY_ID=$(doctl compute ssh-key list --format "ID,Name" | grep 'key-gerardo' | awk '{print $1}')
    #       echo "La clave SSH 'key-gerardo' ya existe con ID: $SSH_KEY_ID"
    #       echo "ID_CLAVE_SSH=$SSH_KEY_ID" >> $GITHUB_ENV
    #     else
    #       echo "La clave SSH 'key-gerardo' no se encontró. Creando nueva clave SSH..."
    #       doctl compute ssh-key create key-gerardo --public-key "$SSH_PUBLIC_KEY"
    #       # Obtener el ID de la clave SSH recién creada
    #       SSH_KEY_ID=$(doctl compute ssh-key list --format "ID,Name" | grep 'key-gerardo' | awk '{print $1}')
    #       echo "Nueva clave SSH 'key-gerardo' creada con ID: $SSH_KEY_ID"
    #       echo "ID_CLAVE_SSH=$SSH_KEY_ID" >> $GITHUB_ENV
    #     fi










    
    - name: Buscar clave SSH
      run: |
        # Verificar si la clave SSH 'key-gerardo' existe
        if ! doctl compute ssh-key list --format "Name" | grep -q 'key-gerardo'; then
          echo "La clave SSH 'key-gerardo' no se encontró. Creando nueva clave SSH..."
          doctl compute ssh-key create key-gerardo --public-key "$SSH_PUBLIC_KEY"
        else
          echo "La clave SSH 'key-gerardo' ya existe."
          echo "SSH_KEY_ID =$(doctl compute ssh-key list --format "ID,Name" | grep 'key-gerardo' | awk '{print $1}')" >> "$GITHUB_ENV"
        fi
        
    - name: print SSH_KEY_ID
      run: echo "la key es $SSH_KEY_ID y el nombre del droplet es $DROPLET_NAME"


