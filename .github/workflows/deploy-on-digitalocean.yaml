# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: deploy-on-digitalocean

on:
  # workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  DROPLET_NAME: droplet-actions-neurone-v2 #Nombre que llevará el droplet a crear
  DROPLET_IPV4: "" #IPv4 que tendrá el droplet una vez creado
  DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
  SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }} #Clave publica de la maquina para conectarse al servidor
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }} #Clave privada de la maquina para conectarse al servidor
  SSH_KEY_ID: "" #ID que tendrá la clave publica agregada en el listado de claves de doctl
  SSH_KEY_NAME: local_public_key #Nombre que llevará la clave publica asociada a la cuenta de digitalocean, se buscará si la clave existe de acuerdo con este nombre

jobs:
  deploy:

    runs-on: ubuntu-22.04

    strategy:
      matrix:
        node-version: [16.14.1]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - name: ssh-keygen
      run: ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ''

    - name: Copy ssh key of environment variables in local machine
      run: |
        echo "${{ env.SSH_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub
        echo "${{ env.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
      
    - name: Clonación de repositorio de Trivia
      uses: actions/checkout@v3
      with:
        path: trivia 
        
    - name: Clonación de Neurone-gm
      uses: actions/checkout@v3
      with:
        repository: trabajo-titulacion-neurone/modulo-neurone-gm
        # token: 
        path: neurone-gm

    - name: Clonación de neurone-deploy
      uses: actions/checkout@v3
      with:
        repository: trabajo-titulacion-neurone/neurone-deploy
        # token: 
        path: neurone-deploy

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Terraform Init
      working-directory: ./neurone-deploy/trivia-deploy/terraform/digitalocean
      #id: init
      run: terraform init

    - name: Editar el archivo variables.tf para agregar token de digitalocean
      working-directory: ./neurone-deploy/trivia-deploy/terraform/digitalocean
      run: |
        # Obtener el token de DigitalOcean desde la variable de entorno de Actions
        digitalocean_token="${{ env.DIGITALOCEAN_ACCESS_TOKEN }}"

        # Reemplazar el valor de default en la variable digitalocean_token del archivo variables.tf
        sed -i '/variable "token_digitalocean" {/,/}/{s/^\(\s*default\s*=\s*"\).*\(".*\)/\1'"$digitalocean_token"'\2/}' variables.tf


    - name: Delete SSH_KEY on digitalocean if exists so that Terraform create it
      run: |
        # Si la clave SSH con nombre 'key-droplet' no existe, se imprime mensaje por pantalla
        if ! doctl compute ssh-key list --format "Name" | grep -q $SSH_KEY_NAME; then
          echo "La clave no existe por lo que se creará con Terraform"
        #Si existe la clave, esta se borra
        else
          echo "La clave SSH $SSH_KEY_NAME ya existe."
          echo "SSH_KEY_ID=$(doctl compute ssh-key list --format "ID,Name" | grep $SSH_KEY_NAME | awk '{print $1}')" >> "$GITHUB_ENV"
          ssh_key_id="$(doctl compute ssh-key list --format "ID,Name" | grep $SSH_KEY_NAME | awk '{print $1}')"
          doctl compute ssh-key delete $ssh_key_id
        fi

    - name: cat variables.tf
      working-directory: ./neurone-deploy/trivia-deploy/terraform/digitalocean
      run: cat variables.tf
      
    - name: Destroy ssh-key resource on digitalocean if exists
      working-directory: ./neurone-deploy/trivia-deploy/terraform/digitalocean
      run: terraform destroy 
      
    - name: Terraform Plan
      working-directory: ./neurone-deploy/trivia-deploy/terraform/digitalocean
      run: terraform plan

    - name: Create Droplet
      working-directory: ./neurone-deploy/trivia-deploy/terraform/digitalocean
      run: terraform apply -auto-approve

    - name: LS
      working-directory: ./neurone-deploy/trivia-deploy/terraform/digitalocean
      run: ls -a
       
      
    
      
